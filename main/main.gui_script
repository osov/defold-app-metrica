-- Logging helpers
local pretty_print = require('main.pretty_print')
local function lines(str)
	local t = {}
	local function helper(line) table.insert(t, line) return '' end
	helper((str:gsub('(.-)\n', helper)))
	return t
end
local logs_lines = {}
local function log(text)
	local text_lines = lines(text)
	for i = 1, #text_lines do
		table.insert(logs_lines, text_lines[i])
		if #logs_lines > 62 then
			table.remove(logs_lines, 1)
		end
	end
end
local function log_flush()
	gui.set_text(gui.get_node('logs_label'), table.concat(logs_lines, '\n'))
end
local function plog(t)
	log(pretty_print(t))
end

-- List ids for all platforms.
local appmetrica_id = '980e39a2-3619-41a3-aad9-1067a96e3ba7'

-- AppMetrica event handler.
local function appmetrica_listener(self, message_id, message)
	log('appmetrica_listener')
	plog({message_id = message_id, message = message})
end

-- Button handlers

local function init_pressed(self)
	log('init_pressed')
	appmetrica.set_callback(appmetrica_listener)
	appmetrica.initialize(appmetrica_id)
end

local function report_event(self)
	log('report_event_pressed')
	appmetrica.report_event('event_name1', '')
end

local function report_event_params(self)
	log('report_event_params_pressed')
	appmetrica.report_event('event_name2', json.encode({key1 = 'val1', key2 = 'val2'}))
end

local function send_revenue(self)
	log('send_revenue_pressed')
	appmetrica.send_revenue('1.99', 'Yandex Advertising Network', 'unit-id', 'estimated', 'BANNER')
end

-- Show/hide logs view

local function logs_pressed(self)
	gui.set_enabled(gui.get_node('logs'), not gui.is_enabled(gui.get_node('logs')))
end

-- GUI init
function init(self)
	msg.post('.', 'acquire_input_focus')
	msg.post('@render:', 'clear_color', {color = vmath.vector4(1.0, 1.0, 1.0, 1.0)})
	gui.set_enabled(gui.get_node('logs'), false)
end

-- Update logs view
local frame = 0
function update(self, dt)
	frame = frame + 1
	if frame == 30 then
		log_flush()
		frame = 0
	end
end

-- Check if a button is clicked
local function button_click(self, action, node_name, callback)
	if gui.pick_node(gui.get_node(node_name), action.x, action.y) then
		if action.pressed then
			gui.set_scale(gui.get_node(node_name), vmath.vector3(1.02, 1.02, 1.02))
		elseif action.released then
			gui.set_scale(gui.get_node(node_name), vmath.vector3(1, 1, 1))
			callback(self)
		end
	end
end

local buttons = {
	btn_init = init_pressed,
	btn_report_event = report_event,
	btn_report_event_params = report_event_params,
	btn_send_revenue = send_revenue,

	btn_logs = logs_pressed
}

function on_input(self, action_id, action)
	if action_id == hash('touch') then
		for button, callback in pairs(buttons) do
			button_click(self, action, button, callback)
		end
	end
end
